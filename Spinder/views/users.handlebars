<div class="hidden">
    <input type="hidden" id="curr_user_profile" value={{curr_user.musicalProfile}} />
    <input type="hidden" id="curr_user_liked" value={{curr_user.likedProfiles}} />
</div>
<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown"
        aria-expanded="false">
        Sort
    </button>
    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
        <li><a class="dropdown-item" id="name-sort-asc" href="#">Name A-Z</a></li>
        <li><a class="dropdown-item" href="#" id="name-sort-dsc">Name Z-A</a></li>
        <li><a class="dropdown-item" href="#" id="match-sort-asc">Match % 0-100</a></li>
        <li><a class="dropdown-item" href="#" id="match-sort-dsc">Match % 100-0</a></li>
    </ul>
</div>
<div class="row row-cols-1 row-cols-md-4 g-4" id="card-deck">
    {{#each users}}
    {{#compare this._id ../curr_user._id operator="!="}}
    {{#unless this.isPrivate }}
    <div class="col">
        <div class="card mb-3 shadow border-light h-100">
            <div class="card-body bg-light" id={{this._id}}>
                <div class="flip">
                    <div class="front">
                        <img class="shadow circle mx-auto my-auto d-block" src="{{this.img}}" alt="user image">
                    </div>
                    <div class="back">
                        <div class="shadow user-chart mx-auto my-auto d-block" href="{{this.musicalProfile}}"
                            id="{{this._id}}-chart">
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-header" id="{{this._id}}-match">
                <span class="d-flex">
                    <h5 class="card-title text-dark my-auto d-block" id="match-data">No Match Data</h5>
                    <span class="ml-auto material-icons text-primary" role="button" id="like_btn">favorite_border</span>
                </span>
            </div>
            <div class="card-footer bg-dark">
                <h5 class="mr-auto card-title"><a href="/users/{{this._id}}" id="card-username">{{this.username}}</a>
                </h5>
                <p class="small card-text text-light">{{this.firstName}} {{this.lastName}}</p>
            </div>
        </div>
    </div>
    {{/unless}}
    {{/compare}}
    {{/each}}
</div>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdn.rawgit.com/nnattawat/flip/v1.0.11/dist/jquery.flip.min.js"></script>
<script type="text/javascript">
    (function ($) {

        function createChart(divName, profile, profile2) {
            data = [{
                type: 'scatterpolar',
                r: [profile.danceability, profile.energy, profile.loudness, profile.acousticness, profile.valence],
                theta: ['Danceability', 'Energy', 'Loudness', 'Acousticness', 'Valence'],
                fill: 'toself',
                name: 'You'
            },
            {
                type: 'scatterpolar',
                r: [profile2.danceability, profile2.energy, profile2.loudness, profile2.acousticness, profile2.valence],
                theta: ['Danceability', 'Energy', 'Loudness', 'Acousticness', 'Valence'],
                fill: 'toself',
                name: 'Them'
            }
            ]

            layout = {
                polar: {
                    radialaxis: {
                        visible: true,
                        range: [0, 1]
                    }
                },
                showlegend: false,
                margin: {
                    l: 0,
                    r: 0,
                    t: 0,
                    b: 0
                }
            }

            var config = {
                responsive: true,
                displayModeBar: false
            }

            Plotly.newPlot(divName, data, layout, config);
        }

        function getMatchPercent(id, profile, profile2) {
            let arr1 = [profile.danceability, profile.energy, profile.loudness, profile.acousticness, profile.valence];
            let arr2 = [profile2.danceability, profile2.energy, profile2.loudness, profile2.acousticness, profile2.valence];

            let sum = 0;
            for (let i = 0; i < arr1.length; i++) {
                sum += Math.abs(arr1[i] - arr2[i]);
            }

            sum = (1 - (sum / 5.0)) * 100;
            sum = sum.toFixed(1);

            $(`#${id}-match`).find(".card-title").text(`${sum}% Match`);

        }

        function getMusicalProfileAjax(id) {
            var requestConfig = {
                method: 'GET',
                url: '/profiles/' + id,
                success: function (data) { },
                async: false,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                error: function (err) {
                    console.log(err);
                }
            };

            var response = $.ajax(requestConfig).responseText;
            return JSON.parse(response);

        }

        function likeProfile(id) {
            var requestConfig = {
                method: 'POST',
                url: '/users/' + id + '/like',
            };

            $.ajax(requestConfig).then(function (response) {
                console.log("Liked " + id);
            });
        }

        function unlikeProfile(id) {
            var requestConfig = {
                method: 'POST',
                url: '/users/' + id + '/unlike',
            };

            $.ajax(requestConfig).then(function (response) {
                console.log("Unliked " + id);
            });
        }

        let curr_profile = getMusicalProfileAjax($('#curr_user_profile').attr('value'));
        let curr_user_liked = $('#curr_user_liked').attr('value');

        var $userList = $('#card-deck');
        var $users = $userList.children('.col');
        console.log($users.length);

        var sortList = Array.prototype.sort.bind($users);

        var sortUsers = function (type, ascending) {

            sortList(function (a, b) {

                // Cache inner content from the first element (a) and the next sibling (b)
                var aText;
                var bText;
                if (type === "name") {
                    aText = $(a).find("#card-username").text();
                    bText = $(b).find("#card-username").text();
                } else if (type === "match") {
                    aText = $(a).find("#match-data").text();
                    bText = $(b).find("#match-data").text();

                    if (aText === "No Match Data")
                        aText = "";
                    else 
                        aText = parseFloat(aText.replace("% Match", ""));
                    
                    if (bText === "No Match Data")
                        bText = "";
                    else 
                        bText = parseFloat(bText.replace("% Match", ""))
                }
                
                if (aText < bText) {
                    return ascending ? -1 : 1;
                }

                if (aText > bText) {
                    return ascending ? 1 : -1;
                }

                // Returning 0 leaves them as-is
                return 0;
            });

            $userList.append($users);
        }


        $(document).ready(function () {

            $('#name-sort-asc').on('click', function (e) {
                console.log("name ascending");
                e.preventDefault();
                sortUsers("name", true);
            });

            $('#name-sort-dsc').on('click', function (e) {
                console.log("name descending");
                e.preventDefault();
                sortUsers("name", false);
            });

            $('#match-sort-asc').on('click', function (e) {
                console.log("match ascending");
                e.preventDefault();
                sortUsers("match", true);
            });

            $('#match-sort-dsc').on('click', function (e) {
                console.log("match descending");
                e.preventDefault();
                sortUsers("match", false);
            });


            $('.card').each(function (i, obj) {
                let user_id = $(this).find('.card-body').attr('id');
                let like_btn = $(this).find('#like_btn');
                let profile = $(`#${user_id}-chart`).attr('href');

                if (curr_profile && profile) {
                    let response = getMusicalProfileAjax(profile);
                    if (curr_profile.averageAudioFeatures && response.averageAudioFeatures) {
                        createChart(`${user_id}-chart`, curr_profile.averageAudioFeatures, response.averageAudioFeatures);
                        getMatchPercent(user_id, curr_profile.averageAudioFeatures, response.averageAudioFeatures);
                        $(this).find('.flip').flip({
                            trigger: 'hover'
                        });
                    }
                }

                if (curr_user_liked.indexOf(user_id) != -1) {
                    like_btn.text("favorite");
                } else {
                    like_btn.text("favorite_border");
                }

                like_btn.on('click', function (e) {
                    e.preventDefault();
                    console.log(like_btn.html());
                    if (like_btn.text() == "favorite") {
                        like_btn.text("favorite_border");
                        unlikeProfile(user_id);
                    } else {
                        like_btn.text("favorite");
                        likeProfile(user_id);
                    }
                });

            });
        });
    })(window.jQuery);
</script>